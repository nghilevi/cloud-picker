{"version":3,"sources":["utils/constants.tsx","components/CloudsOptions/index.tsx","components/ProvidersOptions/index.tsx","components/RegionsOptions/index.tsx","components/SelectedOption/GlobeIcon/index.tsx","components/SelectedOption/index.tsx","components/CloudPickerOptions/index.tsx","components/CloudsLoadingStatus/index.tsx","components/GeolocationStatus/index.tsx","components/CloudPicker.tsx","ErrorBoundary.tsx","utils/transform/cloudsInfoReducer.tsx","utils/transform/distanceComparator.tsx","utils/transform/extractCloudProviderName.tsx","utils/transform/getDistance.tsx","utils/transform/transformCloudsData.tsx","utils/transform/rawCloudMap.tsx","utils/transform/capitalizeFirstLetters.tsx","utils/transform/finalizeTransforming.tsx","hooks/useGeolocation/index.tsx","hooks/useRawClouds/index.tsx","hooks/useClouds/index.tsx","App.tsx","index.tsx"],"names":["Status","ErrorText","GeolocationStatusText","CLOUDS_API_URL","SelectedOptionText","DefaultCoords","CloudsStatusText","Loading","Failure","TryAgain","DefaultEmptyCloud","description","name","provider","region","distance","NaN","latitude","longitude","CloudsOptions","cloudsByRegionAndProvider","selectedCloud","onCloudClick","length","className","map","cloud","key","onClick","e","ProvidersOptions","providers","selectedCloudProvider","onProviderClick","cloudProvider","src","alt","RegionsOptions","cloudRegionsByProvider","selectedCloudRegion","onRegionClick","GlobeIcon","globeRegion","search","SelectedOption","Selected","Unselected","CloudPickerOptions","clouds","CloudsLoadingStatus","rawCloudsStatus","result","renderOptions","GeolocationStatus","geolocationStatus","userLatitude","userLongitude","statusText","Success","Unavailable","Default","render","CloudPicker","useState","setCloudRegionsByProvider","setCloudsByRegionAndProvider","setSelectedCloudProvider","setSelectedCloudRegion","setSelectedCloud","useEffect","selectProvider","Object","keys","cloudsByProviders","regions","selectRegion","nearestRegion","ErrorBoundary","props","state","hasError","error","errorInfo","console","log","this","Error","children","React","Component","cloudsInfoReducer","push","distanceComparator","cloud1","cloud2","extractCloudProviderName","strToMatch","matched","exec","getDistance","lat1","lon1","lat2","lon2","unit","indexOf","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","transformCloudsData","rawClouds","userCoords","round","geo_latitude","geo_longitude","lat","lon","cloud_description","str","geo_region","split","currentVal","charAt","toUpperCase","slice","join","cloud_name","isNaN","rawCloudMap","sort","reduce","clonedClouds","forEach","filter","finalizeTransforming","useGeolocation","setUserLatitude","setUserLongitude","setGeolocationStatus","geolocationError","setGeolocationError","navigator","geolocation","getCurrentPosition","position","coords","useRawClouds","cloudsApiUrl","setRawClouds","setRawCloudsStatus","fetch","then","data","json","response","catch","useClouds","setClouds","transformedCloudsData","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b4b8725.chunk.js","sourcesContent":["\nconst CLOUDS_API_URL = 'https://api.aiven.io/v1/clouds'\n\nenum Status { //use string as it is easier to debug e.g while testing\n    Default = 'Default',\n    Loading = 'Loading',\n    Success = 'Success',\n    Failure = 'Failure',\n    Unavailable = 'Unavailable'\n}\n\nenum ErrorText {\n    Error = 'Something went wrong',\n    TryAgain = 'Please try again later!'\n}\n\nenum GeolocationStatusText {\n    Default = 'The Prime Meridian (Greenwich) geolocation is used by default to find the nearest service cloud.',\n    Loading = 'Fetching geolocation...',\n    Success = 'The service cloud list is ranked dynamically based on the shortest distance to your coordination at:',\n    Failure = 'We can not get your geolocation.',\n    Unavailable = 'Geolocation is not available on your device!'\n}\n\n// use const here since computed values are not permitted in an enum string\n// ref: https://github.com/microsoft/TypeScript/issues/40793\nconst CloudsStatusText = {\n    Loading: 'Fetching clouds... Please wait a few seconds ... Thank you!',\n    Failure: 'Data loaded failed' + ErrorText.TryAgain // possible a mechanism to automatically reconnect or retry \n}\n\nenum SelectedOptionText {\n    Selected = 'You selected:',\n    Unselected = 'Please select cloud service in the list below filtering by Service Cloud Provider and Region.'\n}\n\n// The latitude of Prime Meridian (Greenwich)\nenum DefaultCoords {\n    lat = 51.477928, lon = -0.001545\n}\n\nconst DefaultEmptyCloud = {\n    description: '',  \n    name: '', \n    provider: '', \n    region: '',\n    distance: NaN,\n    latitude: NaN, \n    longitude: NaN\n}\n\nexport { Status, DefaultCoords, CLOUDS_API_URL, GeolocationStatusText, CloudsStatusText, SelectedOptionText, DefaultEmptyCloud, ErrorText };","import { Cloud } from \"../../utils/types\";\nimport './index.scss';\n\ntype CloudsOptionsProps = {\n  cloudsByRegionAndProvider: Cloud[],\n  selectedCloud: Cloud,\n  onCloudClick: Function\n}\n\nconst CloudsOptions = ({ cloudsByRegionAndProvider, selectedCloud, onCloudClick }: CloudsOptionsProps) => {\n  \n  const renderCloudsOptions = () => {\n    if(cloudsByRegionAndProvider && cloudsByRegionAndProvider.length > 0){\n      return (\n        <ol className=\"clouds-list\">\n          {\n            cloudsByRegionAndProvider.map((cloud: Cloud, key: number) => {\n              return (\n                <li key={key}>\n                  <button\n                    data-testid='cloud-option'\n                    className={`clouds-list-item ${selectedCloud?.description === cloud.description ? 'selected' : ''}`}\n                    onClick={(e) => onCloudClick(cloud)}\n                  >\n                    <h3 data-testid='cloud-name'>{cloud.name} <span>📍 ~{cloud.distance} km</span></h3>\n                    <p className='cloud-description'>{cloud.description}</p>\n                  </button>\n                </li>\n              )\n            })\n          }\n        </ol>\n      )\n    }else {\n      return <></>\n    }\n  }\n\n  return (\n    <>\n      {\n        renderCloudsOptions()\n      }\n    </>\n  )\n}\n\nexport default CloudsOptions;","import './index.scss';\n\ntype ProvidersOptionsProps = {\n  providers: string[],\n  selectedCloudProvider: string,\n  onProviderClick: Function\n}\n\nconst ProvidersOptions = ({ providers, selectedCloudProvider, onProviderClick }: ProvidersOptionsProps) => {\n  return (\n    <div className='providers'>\n      <h3>1. Select Cloud Provider</h3>\n      <ul className='providers-list'>\n        {\n          providers.map((cloudProvider: string, key: number) => {\n            return (\n              <li key={key}>\n                <button\n                  data-testid='provider'\n                  name={cloudProvider}\n                  className={`providers-list-item ${selectedCloudProvider === cloudProvider ? 'selected' : ''}`}\n                  onClick={() => onProviderClick(cloudProvider)}>\n                  <img src={`assets/logo/${cloudProvider}.png`} alt={cloudProvider} />\n                </button>\n              </li>\n            )\n          })\n        }\n      </ul>\n    </div>\n  )\n}\n\nexport default ProvidersOptions;","import './index.scss';\n\ntype RegionsOptionsProps = {\n  cloudRegionsByProvider: string[],\n  selectedCloudRegion: string,\n  onRegionClick: Function\n}\n\nconst RegionsOptions = ({ cloudRegionsByProvider, selectedCloudRegion, onRegionClick }: RegionsOptionsProps) => {\n  return (\n    <div className='regions'>\n      <h3>2. Select Cloud by Region</h3>\n      <ul className='regions-list'>\n        {\n          cloudRegionsByProvider.map((region: string, key: number) => {\n            return (\n              <li key={key}>\n                <button\n                  data-testid='region'\n                  className={`regions-list-item ${selectedCloudRegion === region ? 'selected' : ''}`}\n                  onClick={() => onRegionClick(region)}\n                >\n                  {region}\n                </button>\n              </li>\n            )\n          })\n        }\n      </ul>\n    </div>\n  )\n}\n\nexport default RegionsOptions;","import './index.scss';\n\ntype GlobeIconProps = {\n    region: string\n}\n\nconst GlobeIcon = ({region}:GlobeIconProps) => {\n    const globeRegion = region && (region.search('Asia') > -1 || region.search('Australia') > -1 ) ? 'Asia' : region.search('America') > -1 ? 'America' : 'Europe-Africa'\n    return <span className='globe-icon'>{globeRegion === 'Asia' ? \"🌏\" : globeRegion === 'America' ? \"🌎\" : \"🌍\" }</span>\n}\n\nexport default GlobeIcon;","import { SelectedOptionText } from \"../../utils/constants\"\nimport { Cloud } from \"../../utils/types\";\nimport GlobeIcon from \"./GlobeIcon\";\n\ntype SelectedOptionProps = {\n    selectedCloud: Cloud\n}\n\nconst SelectedOption = ({ selectedCloud }: SelectedOptionProps) => {\n    return (<>{selectedCloud ? <p>{SelectedOptionText.Selected}\n        <GlobeIcon region={selectedCloud?.region} />{selectedCloud?.description}\n    </p> : <p>{SelectedOptionText.Unselected}</p>}</>)\n}\n\nexport default SelectedOption;","import { Cloud, Clouds } from \"../../utils/types\";\nimport CloudsOptions from \"../CloudsOptions\";\nimport ProvidersOptions from \"../ProvidersOptions\";\nimport RegionsOptions from \"../RegionsOptions\";\nimport SelectedOption from \"../SelectedOption\";\n\ntype CloudPickerOptionsProps = {\n  clouds: Clouds,\n  cloudRegionsByProvider: string[],\n  cloudsByRegionAndProvider: Cloud[],\n  selectedCloud: Cloud,\n  selectedCloudProvider: string,\n  selectedCloudRegion: string,\n  onProviderClick: Function,\n  onRegionClick: Function,\n  onCloudClick: Function\n}\n\nconst CloudPickerOptions = (\n  {\n    clouds, cloudRegionsByProvider, cloudsByRegionAndProvider,\n    selectedCloud, selectedCloudProvider, selectedCloudRegion,\n    onRegionClick, onCloudClick, onProviderClick\n  }: CloudPickerOptionsProps) => {\n\n  return (\n    <div>\n      <SelectedOption selectedCloud={selectedCloud} />\n      <ProvidersOptions providers={clouds['providers'] as string[]} selectedCloudProvider={selectedCloudProvider}\n        onProviderClick={onProviderClick} />\n      <RegionsOptions cloudRegionsByProvider={cloudRegionsByProvider}\n        selectedCloudRegion={selectedCloudRegion} onRegionClick={onRegionClick} />\n      <CloudsOptions cloudsByRegionAndProvider={cloudsByRegionAndProvider}\n        selectedCloud={selectedCloud} onCloudClick={onCloudClick} />\n    </div>\n  )\n}\n\nexport default CloudPickerOptions;","import { CloudsStatusText, Status } from \"../../utils/constants\";\n\ntype CloudsLoadingStatusProps = {\n    rawCloudsStatus: string\n};\n\nconst CloudsLoadingStatus = ({ rawCloudsStatus }: CloudsLoadingStatusProps) => {\n\n    const renderOptions = () => {\n        let result;\n        if (rawCloudsStatus === Status.Loading) {\n            result = <p data-testid='cloud-loading-status'>{CloudsStatusText.Loading}</p>\n        } else if (rawCloudsStatus === Status.Failure) {\n            result = <p data-testid='cloud-loading-status'>{CloudsStatusText.Failure}</p>\n        }\n        return result\n    }\n\n    return (\n        <>{renderOptions()}</>\n    )\n\n}\n\nexport default CloudsLoadingStatus;","import { GeolocationStatusText, Status } from \"../../utils/constants\";\n\ntype GeolocationStatusProps = {\n  geolocationStatus: string,\n  userLatitude: number,\n  userLongitude: number\n};\n\nconst GeolocationStatus = ({ geolocationStatus, userLatitude, userLongitude }: GeolocationStatusProps) => {\n\n  const render = ({ geolocationStatus, userLatitude, userLongitude }: GeolocationStatusProps) => {\n    let statusText\n    switch (geolocationStatus) {\n      case Status.Loading:\n        statusText = <p data-testid='geo-loading-status'>{GeolocationStatusText.Loading}</p>\n        break;\n      case Status.Success:\n        statusText = <p data-testid='geo-loading-status'>{GeolocationStatusText.Success} {userLatitude}, {userLongitude}</p>\n        break;\n      case Status.Unavailable:\n        statusText = <p data-testid='geo-loading-status'>{GeolocationStatusText.Unavailable} {GeolocationStatusText.Default}</p>\n        break;\n      case Status.Failure:\n        statusText = <p data-testid='geo-loading-status'>{GeolocationStatusText.Failure} {GeolocationStatusText.Default}</p>\n        break;\n      default: // no implementation\n        statusText = <p data-testid='geo-loading-status'></p>\n    }\n    return statusText\n  }\n\n  return (\n    <>{render({ geolocationStatus, userLatitude, userLongitude })}</>\n  )\n\n}\n\nexport default GeolocationStatus;","import { useEffect, useState } from \"react\";\nimport { Status } from \"../utils/constants\";\nimport { Cloud, Clouds, CloudsByProviders } from \"../utils/types\";\nimport CloudPickerOptions from \"./CloudPickerOptions\";\nimport CloudsLoadingStatus from \"./CloudsLoadingStatus\";\nimport GeolocationStatus from \"./GeolocationStatus\";\n\ntype CloudPickerProps = {\n  userLatitude: number,\n  userLongitude: number,\n  clouds: Clouds,\n  geolocationStatus: string,\n  rawCloudsStatus: string\n}\n\nfunction CloudPicker({ userLatitude, userLongitude, clouds, geolocationStatus, rawCloudsStatus }: CloudPickerProps) {\n\n  // **** HOOKS ****\n\n  const [cloudRegionsByProvider, setCloudRegionsByProvider] = useState<string[]>([])\n  const [cloudsByRegionAndProvider, setCloudsByRegionAndProvider] = useState<Cloud[]>([])\n  const [selectedCloudProvider, setSelectedCloudProvider] = useState('')\n  const [selectedCloudRegion, setSelectedCloudRegion] = useState('')\n  const [selectedCloud, setSelectedCloud] = useState<Cloud>()\n\n  useEffect(() => {\n    // if clouds data is populated BUT no cloud provider has been selected, then select it\n    if (clouds.providers.length > 0 && selectedCloudProvider === '') {\n      // select cloud provider by the nearest service cloud by default / the first provider presented in the clouds list\n      selectProvider(clouds, Object.keys(clouds)[0])\n    }\n  })\n\n  // **** SELECT LOGIC **** \n\n  const selectProvider = (clouds: Clouds, provider: string) => {\n    const cloudsByProviders: CloudsByProviders = clouds[provider] as unknown as CloudsByProviders\n    setSelectedCloudProvider(provider)\n    setCloudRegionsByProvider(cloudsByProviders.regions as string[])\n    selectRegion(clouds, provider, cloudsByProviders.nearestRegion as string)\n  }\n\n  const selectRegion = (clouds: Clouds, provider: string, region: string) => {\n    const cloudsByProviders: CloudsByProviders = clouds[provider] as unknown as CloudsByProviders\n    setSelectedCloudRegion(region)\n    setCloudsByRegionAndProvider(cloudsByProviders[region] as Cloud[])\n  }\n\n  // **** EVENTS HANDLING **** \n\n  const onProviderClick = (cloudProvider: string) => {\n    selectProvider(clouds, cloudProvider)\n  }\n\n  const onRegionClick = (region: string) => {\n    selectRegion(clouds, selectedCloudProvider, region)\n  }\n\n  const onCloudClick = (cloud: Cloud) => {\n    setSelectedCloud(cloud)\n  }\n\n  // **** RENDERING LOGIC ****\n\n  return (\n    <>\n      <h1>Cloud Picker</h1>\n      <GeolocationStatus\n        geolocationStatus={geolocationStatus}\n        userLatitude={userLatitude}\n        userLongitude={userLongitude} />\n      {\n        rawCloudsStatus === Status.Loading || rawCloudsStatus === Status.Failure ?\n          <CloudsLoadingStatus\n            rawCloudsStatus={rawCloudsStatus}\n          /> : geolocationStatus !== Status.Loading ?\n            <CloudPickerOptions\n              data-testid='cloud-picker-options'\n              clouds={clouds}\n              cloudRegionsByProvider={cloudRegionsByProvider}\n              cloudsByRegionAndProvider={cloudsByRegionAndProvider}\n              selectedCloud={selectedCloud as Cloud}\n              selectedCloudProvider={selectedCloudProvider}\n              selectedCloudRegion={selectedCloudRegion}\n              onProviderClick={onProviderClick}\n              onRegionClick={onRegionClick}\n              onCloudClick={onCloudClick}\n            /> : ''\n      }\n    </>\n  )\n}\n\nexport default CloudPicker;\n","import React from \"react\";\nimport { ErrorText } from \"./utils/constants\";\n\nclass ErrorBoundary extends React.Component<{}, { [key: string]: any}> {\n    constructor(props: any) {\n      super(props);\n      this.state = { hasError: false };\n    }\n  \n    static getDerivedStateFromError(error: any) {\n      // Update state so the next render will show the fallback UI.\n      return { hasError: true };\n    }\n  \n    componentDidCatch(error: any, errorInfo: any) {\n      // possible log the error to an error reporting service\n      console.log(error, errorInfo);\n    }\n  \n    render() {\n      if (this.state.hasError) {\n        // render custom fallback UI\n        return <p>{ErrorText.Error} {ErrorText.TryAgain}</p>;\n      }\n  \n      return this.props.children; \n    }\n    \n  }\n  \n  export default ErrorBoundary;","import { Cloud } from \"../types\"\n\nconst cloudsInfoReducer = (clouds: any, cloud: Cloud) => {\n    if (!clouds[cloud.provider]) { // first time encounter the provider\n        clouds[cloud.provider] = { // populate regions, nearestRegion\n            nearestRegion: cloud.region,\n            [cloud.region]: [cloud]\n        }\n    } else {\n        if (clouds[cloud.provider][cloud.region]) { // add service cloud filterd by region and provider\n            clouds[cloud.provider][cloud.region].push(cloud)\n        } else {\n            clouds[cloud.provider][cloud.region] = []\n        }\n    }\n    return clouds\n}\n\nexport { cloudsInfoReducer }","import { Cloud } from \"../types\"\n\n// sort by distance, smallest distance comes first\nconst distanceComparator = (cloud1: Cloud, cloud2: Cloud) => cloud1.distance - cloud2.distance\n\nexport { distanceComparator}","const extractCloudProviderName = (strToMatch: string): string => {\n    let regex = /-\\s(.*?):/;\n    let matched = regex.exec(strToMatch);\n    return matched ? matched[1] : ''\n}\n\n\nexport { extractCloudProviderName }","// reference: htmlgoodies.com/javascript/calculate-the-distance-between-two-points-in-your-web-apps/\nconst getDistance = (lat1: number, lon1: number, lat2: number, lon2: number, unit: string = 'K') => {\n    if (typeof lat1 !== 'number' || typeof lon1 !== 'number' ||\n        typeof lat2 !== 'number' || typeof lon2 !== 'number' || typeof unit !== 'string'\n        || ['K', 'N'].indexOf(unit) === -1) {\n        return NaN\n    }\n    var radlat1 = Math.PI * lat1 / 180\n    var radlat2 = Math.PI * lat2 / 180\n    var theta = lon1 - lon2\n    var radtheta = Math.PI * theta / 180\n    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n    dist = Math.acos(dist)\n    dist = dist * 180 / Math.PI\n    dist = dist * 60 * 1.1515\n    if (unit === 'K') { dist = dist * 1.609344 }\n    if (unit === 'N') { dist = dist * 0.8684 }\n    return dist\n}\n\nexport { getDistance }","// **** DATA TRANSFORMATION LOGIC **** \n\nimport { RawCloud, UserCoords } from \"../types\"\nimport { cloudsInfoReducer } from \"./cloudsInfoReducer\"\nimport { distanceComparator } from \"./distanceComparator\"\nimport { finalizeTransforming } from \"./finalizeTransforming\"\nimport { rawCloudMap } from \"./rawCloudMap\"\n\nconst transformCloudsData = (rawClouds: RawCloud[], userCoords: UserCoords) => {\n    const clouds =\n        rawClouds\n            .map(rawCloudMap(userCoords))\n            .sort(distanceComparator)\n            .reduce(cloudsInfoReducer, {})\n\n    return finalizeTransforming({...clouds})\n}\n\nexport { transformCloudsData }","import { DefaultEmptyCloud } from \"../constants\"\nimport { Cloud, RawCloud, UserCoords } from \"../types\"\nimport { capitalizeFirstLetters } from \"./capitalizeFirstLetters\"\nimport { extractCloudProviderName } from \"./extractCloudProviderName\"\nimport { getDistance } from \"./getDistance\"\n\nconst rawCloudMap = (userCoords: UserCoords) => {\n    return (cloud: RawCloud): Cloud => {\n\n        // evaluate if value is null, undefined, 0, false, \"\", NaN\n        if(!cloud || typeof cloud !== 'object'){\n            return DefaultEmptyCloud\n        }\n        return {\n            distance: Math.round(getDistance(cloud.geo_latitude, cloud.geo_longitude, userCoords.lat, userCoords.lon, 'K')),\n            provider: extractCloudProviderName(cloud.cloud_description),\n            region: capitalizeFirstLetters(cloud.geo_region),\n            description: cloud.cloud_description || '',\n            name: cloud.cloud_name || '',\n            latitude: isNaN(cloud.geo_latitude) ? NaN : cloud.geo_latitude,\n            longitude: isNaN(cloud.geo_longitude) ? NaN : cloud.geo_longitude\n        }\n    }\n}\n\nexport {rawCloudMap}","// inspired from https://flexiple.com/javascript-capitalize-first-letter/\nconst capitalizeFirstLetters = (str: string): string => {\n    if (typeof str === 'string') {\n        return str.split(' ').map((currentVal) => { //loop through each element of the array and capitalize the first letter.\n            return currentVal.charAt(0).toUpperCase() + currentVal.slice(1);\n        }).join(' ')\n    } else {\n        return ''\n    }\n\n}\n\nexport { capitalizeFirstLetters }","\nconst finalizeTransforming = (clouds: any) => {\n    const clonedClouds = { ...clouds }\n    // sort and remove redundant providers & regions data\n    clonedClouds.providers =\n        Object.keys(clonedClouds).sort() // sort providers alphabetically\n            .map((provider: string) => {\n                Object.keys(clonedClouds[provider]).forEach((region: string) => {\n                    if (clonedClouds[provider][region].length === 0) { // remove region without cloud service\n                        delete clonedClouds[provider][region]\n                    }\n                })\n                clonedClouds[provider].regions = Object.keys(clonedClouds[provider])\n                    .sort() // sort regions alphabetically\n                    .filter((region) => region !== 'nearestRegion') // exclude nearestRegion\n                return provider\n            })\n\n    return clonedClouds\n}\n\nexport { finalizeTransforming }","import { useEffect, useState } from \"react\";\nimport { DefaultCoords, GeolocationStatusText, Status } from \"../../utils/constants\";\n\nconst useGeolocation = () => {\n\n    const [userLatitude, setUserLatitude] = useState<number>(DefaultCoords.lat);\n    const [userLongitude, setUserLongitude] = useState<number>(DefaultCoords.lon);\n    const [geolocationStatus, setGeolocationStatus] = useState<string>(Status.Default)\n    const [geolocationError, setGeolocationError] = useState<any>() // geolocation error type is unknown\n\n    useEffect(() => {\n        setGeolocationStatus(Status.Loading)\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition((position) => {\n                setUserLatitude(position.coords.latitude);\n                setUserLongitude(position.coords.longitude);\n                setGeolocationStatus(Status.Success)\n            }, (error) => {\n                setGeolocationStatus(Status.Failure)\n                setGeolocationError(error)\n            });\n        } else {\n            setGeolocationStatus(Status.Unavailable)\n            setGeolocationError(GeolocationStatusText.Unavailable)\n        }\n    }, [])\n\n    return { userLatitude, userLongitude, geolocationStatus, geolocationError }\n}\n\nexport default useGeolocation","import { useEffect, useState } from \"react\"\nimport { Status, CLOUDS_API_URL } from \"../../utils/constants\"\nimport { RawCloud } from \"../../utils/types\"\n\nconst useRawClouds = (cloudsApiUrl = CLOUDS_API_URL) => {\n\n    const [rawClouds, setRawClouds] = useState<RawCloud[]>([])\n    const [rawCloudsStatus, setRawCloudsStatus] = useState<string>(Status.Default)\n\n    useEffect(() => {\n        setRawCloudsStatus(Status.Loading)\n        fetch(cloudsApiUrl)\n            .then(data => data.json())\n            .then((response) => {\n                const rawClouds = response.clouds\n                setRawCloudsStatus(Status.Success)\n                setRawClouds(rawClouds)\n            })\n            .catch(() => {\n                setRawCloudsStatus(Status.Failure)\n                setRawClouds([])\n            })\n    }, [cloudsApiUrl])\n\n    return { rawClouds, rawCloudsStatus }\n\n}\n\nexport default useRawClouds","import { useEffect, useState } from \"react\"\nimport { Status } from \"../../utils/constants\";\nimport { transformCloudsData } from \"../../utils/transform/transformCloudsData\";\nimport { Clouds } from \"../../utils/types\";\nimport useGeolocation from \"../useGeolocation\";\nimport useRawClouds from \"../useRawClouds\";\n\nconst useClouds = () => {\n\n  const { rawClouds, rawCloudsStatus } = useRawClouds()\n  const { userLatitude, userLongitude, geolocationStatus } = useGeolocation()\n  const [clouds, setClouds] = useState<Clouds>({ providers: [] })\n\n  useEffect(() => {\n\n    const transformAllowed = rawCloudsStatus === Status.Success && geolocationStatus !== Status.Loading\n\n    if (transformAllowed) {\n      const transformedCloudsData = transformCloudsData(rawClouds, { lat: userLatitude, lon: userLongitude })\n      setClouds(transformedCloudsData)\n    }\n\n  }, [userLatitude, userLongitude, rawCloudsStatus, geolocationStatus, rawClouds])\n\n  return { userLatitude, userLongitude, rawCloudsStatus, geolocationStatus, clouds }\n\n}\n\nexport default useClouds\n","import CloudPicker from \"./components/CloudPicker\";\nimport './App.scss';\nimport ErrorBoundary from './ErrorBoundary';\nimport useClouds from \"./hooks/useClouds\";\n\nconst App = () => {\n    const { userLatitude, userLongitude, clouds, geolocationStatus, rawCloudsStatus } = useClouds()\n    return (\n        <div className=\"app\">\n            <ErrorBoundary>\n                <CloudPicker\n                    userLatitude={userLatitude}\n                    userLongitude={userLongitude}\n                    clouds={clouds}\n                    geolocationStatus={geolocationStatus}\n                    rawCloudsStatus={rawCloudsStatus}\n                />\n            </ErrorBoundary>\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}